// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace CancerDiagonosticsMLModel2_ConsoleApp1
{
    public partial class CancerDiagonosticsMLModel2
    {
        public const string RetrainFilePath =  @"C:\Users\migue\OneDrive\Ambiente de Trabalho\datasets\survey lung cancer.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(@"GENDER", @"GENDER", outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"AGE", @"AGE"),new InputOutputColumnPair(@"SMOKING", @"SMOKING"),new InputOutputColumnPair(@"YELLOW_FINGERS", @"YELLOW_FINGERS"),new InputOutputColumnPair(@"ANXIETY", @"ANXIETY"),new InputOutputColumnPair(@"PEER_PRESSURE", @"PEER_PRESSURE"),new InputOutputColumnPair(@"CHRONIC DISEASE", @"CHRONIC DISEASE"),new InputOutputColumnPair(@"FATIGUE", @"FATIGUE"),new InputOutputColumnPair(@"ALLERGY", @"ALLERGY"),new InputOutputColumnPair(@"WHEEZING", @"WHEEZING"),new InputOutputColumnPair(@"ALCOHOL CONSUMING", @"ALCOHOL CONSUMING"),new InputOutputColumnPair(@"COUGHING", @"COUGHING"),new InputOutputColumnPair(@"SHORTNESS OF BREATH", @"SHORTNESS OF BREATH"),new InputOutputColumnPair(@"SWALLOWING DIFFICULTY", @"SWALLOWING DIFFICULTY"),new InputOutputColumnPair(@"CHEST PAIN", @"CHEST PAIN")}))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"GENDER",@"AGE",@"SMOKING",@"YELLOW_FINGERS",@"ANXIETY",@"PEER_PRESSURE",@"CHRONIC DISEASE",@"FATIGUE",@"ALLERGY",@"WHEEZING",@"ALCOHOL CONSUMING",@"COUGHING",@"SHORTNESS OF BREATH",@"SWALLOWING DIFFICULTY",@"CHEST PAIN"}))      
                                    .Append(mlContext.BinaryClassification.Trainers.LbfgsLogisticRegression(new LbfgsLogisticRegressionBinaryTrainer.Options(){L1Regularization=0.5803316F,L2Regularization=0.03125F,LabelColumnName=@"LUNG_CANCER",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
 }
